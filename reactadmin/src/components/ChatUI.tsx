import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { callGeminiAPI } from "@/service/GemeniService";
import { useRef, useState } from "react";
import ReactMarkdown from "react-markdown";

interface IChatUI {
    className?: string;
}

const ChatUI = ({ className }: IChatUI) => {
    const [messages, setMessages] = useState([
        {
            text: "**Xin ch√†o!** T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa *Booking Bells*. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
            type: "bot",
        },
    ]);
    const [input, setInput] = useState("");
    const chatEndRef = useRef<HTMLDivElement>(null);

    const sendMessage = async () => {
        if (!input.trim()) return;

        const userMessage = { text: input, type: "user" };
        setInput(""); // X√≥a input sau khi g·ª≠i
        setMessages((prev) => [...prev, userMessage]);

        // üé¨ Hi·ªáu ·ª©ng "ƒêang nh·∫≠p..."
        let dotsCount = 0;
        const typingMessage = { text: "ƒêang nh·∫≠p.", type: "bot" };
        setMessages((prev) => [...prev, typingMessage]);

        const typingInterval = setInterval(() => {
            dotsCount = (dotsCount + 1) % 4;
            const dots = ".".repeat(dotsCount);
            setMessages((prev) => {
                const newMessages = [...prev];
                newMessages[newMessages.length - 1] = {
                    text: `ƒêang nh·∫≠p${dots}`,
                    type: "bot",
                };
                return newMessages;
            });
        }, 500);

        try {
            // üì° G·ª≠i API v·ªõi CH·ªà c√¢u h·ªèi c·ªßa user
            const response = await callGeminiAPI(input);
            console.log(response);
            

            clearInterval(typingInterval); // ‚èπÔ∏è D·ª´ng hi·ªáu ·ª©ng typing

            // Ki·ªÉm tra n·∫øu `response` l√† object -> l·∫•y text t·ª´ `candidates`
            const reply =typeof response === "string" ? response: response?.bot_response || "Kh√¥ng c√≥ ph·∫£n h·ªìi";

            // üìå Hi·ªáu ·ª©ng g√µ ch·ªØ t·ª´ t·ª´
            let currentText = "";
            const botReply = { text: "", type: "bot" };

            setMessages((prev) => {
                const newMessages = [...prev];
                newMessages[newMessages.length - 1] = botReply; // X√≥a "ƒêang nh·∫≠p..."
                return newMessages;
            });

            reply.split("").forEach((char, index) => {
                setTimeout(() => {
                    currentText += char;
                    setMessages((prev) => {
                        const newMessages = [...prev];
                        newMessages[newMessages.length - 1] = {
                            ...botReply,
                            text: currentText,
                        };
                        return newMessages;
                    });
                }, index * 30);
            });
        } catch (error) {
            console.error("L·ªói g·ªçi API:", error);
            clearInterval(typingInterval);

            setMessages((prev) => [
                ...prev,
                { text: "‚ùå L·ªói k·∫øt n·ªëi API. Vui l√≤ng th·ª≠ l·∫°i!", type: "bot" },
            ]);
        }
    };

    return (
        <Card
            className={`rounded-md shadow-lg py-2 mb-[20px] ${className ?? ""}`}
        >
            <CardHeader className="border-b border-gray-200 p-4 bg-sky-400 text-white">
                <CardTitle className="text-center text-xl">
                    H·ªèi ƒë√°p v·ªõi Bells AI
                </CardTitle>
            </CardHeader>
            <CardContent className="p-4 h-[900px]">
                <div className="flex flex-col h-full bg-gray-100 border border-teal-400 rounded-md">
                    {/* Hi·ªÉn th·ªã tin nh·∫Øn */}
                    <div className="flex-grow p-4 overflow-auto text-[18px]">
                        {messages.map((msg, index) => (
                            <div
                                key={index}
                                className={`flex  ${
                                    msg.type === "user"
                                        ? "justify-end"
                                        : "justify-start"
                                }`}
                            >
                                <div
                                    className={`p-3 my-1  rounded-lg ${
                                        msg.type === "user"
                                            ? "bg-gray-300 text-black"
                                            : "bg-blue-200 text-blue-900"
                                    }`}
                                >
                                    <ReactMarkdown>{msg.text}</ReactMarkdown>
                                </div>
                            </div>
                        ))}
                        <div ref={chatEndRef}></div> {/* D√πng ƒë·ªÉ cu·ªôn xu·ªëng */}
                    </div>

                    {/* √î nh·∫≠p tin nh·∫Øn */}
                    <div className="p-4 bg-white flex items-center border-t">
                        <input
                            type="text"
                            className="flex-grow p-2 border rounded-lg outline-none"
                            placeholder="Nh·∫≠p c√¢u h·ªèi..."
                            value={input}
                            onChange={(e) => setInput(e.target.value)}
                            onKeyDown={(e) =>
                                e.key === "Enter" && sendMessage()
                            }
                        />
                        <button
                            onClick={sendMessage}
                            className="ml-2 bg-blue-500 text-white px-4 py-2 rounded-lg"
                        >
                            ‚û§
                        </button>
                    </div>
                </div>
            </CardContent>
        </Card>
    );
};

export default ChatUI;

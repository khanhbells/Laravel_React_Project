<?php

namespace App\Http\Controllers\Api\V1;

use App\Enums\Status;
use App\Http\Controllers\Controller;
use App\Http\Resources\BookingResource;
use App\Http\Resources\DetailDoctorResource;
use App\Http\Resources\HospitalResource;
use App\Http\Resources\PostCatalogueResource;
use App\Http\Resources\SpecialtyResource;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Symfony\Component\HttpFoundation\Response;
use Illuminate\Support\Str;

class GeminiController extends Controller
{


    public function __construct(){}

    public function callRepository($model, $isFolder = true)
    {
        $singularModel = Str::singular($model);
        $modelClass = Str::studly($singularModel);
        $folder = Str::studly(current(explode('_', $singularModel)));

        $repository = $isFolder ? "App\Repositories\\{$folder}\\{$modelClass}Repository"
            : "App\Repositories\\{$modelClass}Repository";
        return $repository;
    }

    public function sendToApiGemeni(Request $request) {
        $userMessage = strtolower($request->input('message'));
        $keyword = $this->keyWordSearch();
        
        // üîç T√¨m t·ª´ kh√≥a trong c√¢u h·ªèi
        $relatedData = [];
        foreach ($keyword as $mainKeyword => $data) {
            foreach ($data['aliases'] as $alias) {
                if (strpos($userMessage, $alias) !== false) {
                    $repoName = $mainKeyword; 
                    $repository = $this->customRepository($repoName);
                    $data = $repository->pagination([...$this->paginateAgrument($request)]);
                    $relatedData[$repoName] = $this->formatData($repoName, $data->items());
                    break;
                }
            }
        }
    
        // üì¶ Ch·ªâ g·ª≠i d·ªØ li·ªáu li√™n quan
        $context = !empty($relatedData) ? json_encode($relatedData, JSON_UNESCAPED_UNICODE) : '';
        dd($context);
    
        // üì° G·ª≠i API Gemini
        $apiKey = env('GEMINI_API_KEY');
        $response = Http::post("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$apiKey", [
            'contents' => [['parts' => [['text' => $userMessage . "\n\n" . $context]]]]
        ]);
    
        return $response->json();
    }


     // üìå H√†m format d·ªØ li·ªáu
    private function formatData($type, $data) {
        switch ($type) {
            case 'doctors':
                return DetailDoctorResource::collection($data);
            case 'hospitals':
                return HospitalResource::collection($data);
            case 'bookings':
                return BookingResource::collection($data);
            default:
                return $data;
        }
    }


    private function customRepository($model)
    {
        $customRepository = app($this->callRepository($model));
        return $customRepository;
    }
    
    private function paginateAgrument(
        $request, 
        $flag = false, 
        $model = null, 
        $relations = [], 
        $condition = [],
        $join = [],
        $select = ['*'],
        $field  = ['name'],
        $orderBy = ['id', 'desc']
    )
    {
        return [
            'select' => $select,
            'orderBy' => $orderBy,
            'perpage' => 100,
            'keyword' => [
                'search' => $request->input('keyword') ?? '',
                'field' => $field
            ],
            'condition' => $condition,
            'whereHas' => $flag && $model != null ? $this->whereHas($request, $model) : [],
            'relations' => $relations,
            'innerJoin' => $join && count($join) > 0 ? $join : []
        ];
    }

    private function whereHas($request, $model)
    {
        return [
            $model . '_catalogues' => function ($query) use ($request) {
                $query->where('publish', 2);
            }
        ];
    }

    private function keyWordSearch(){
        return [
            'hospitals' => [
                'aliases' => ['bv', 'b·ªánh vi·ªán', 'bvi·ªán', 'benhvien', 'hospitals', 'bvi·ªán l·ªõn', 'vi·ªán', 'bvien', 'benh vien'],
            ],
            'doctors' => [
                'aliases' => ['bs', 'bsi', 'b√°c sƒ©', 'bacsi', 'doctors', 'bsi gi·ªèi', 'b√°c s·ªπ', 'bs·ªπ', 'bac sy', 'bacs', 'bsy', 'doctor'],
            ],
            'bookings' => [
                'aliases' => ['dat lich', 'dl', 'ƒë·∫∑t l·ªãch', 'book', 'bookings', 'h·∫πn kh√°m', 'l·ªãch h·∫πn', 'dat kham', 'h·∫πn b√°c sƒ©', 'h·∫πn gi·ªù', 'dat hen','ƒë∆°n kh√°m', 'don kham', 'ƒë∆°n h·∫πn', 'b√°c sƒ©', 'bac si', 'n·ªïi b·∫≠t', 'noi bat', 'thanh toan', 'thanh to√°n', 'ƒë√£ duy·ªát', 'ƒë√£ h·ªßy', 'ch∆∞a duy·ªát', 't·ªïng ti·ªÅn','tong tien'],
            ],
            'specialties' => [
                'aliases' => ['ck', 'chuyenkhoa', 'd·ªãch v·ª• kh√°m', 'dv kham', 'specialties', 'khoa', 'khoa kh√°m', 'chuy√™n ngh√†nh', 'chuyenk', 'chuy√™n khoa n√†o', 'khoa n√†o'],
            ],
            'schedules' => [
                'aliases' => ['lich kham', 'l·ªãch kh√°m', 'lk', 'th·ªùi gian', 'tgian', 'time', 'kh√°m', 'kham', 'gio', 'gi·ªù'],
            ],
        ];
    }
}
